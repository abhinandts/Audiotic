<!-- <div class="text-center mb-200 mt-100">
    <h3>Your order is Placed...</h3>
    <a href="/myAccount" class="btn mt-15 mr-10 hover-up">Show Orders</a>
    <a href="/home" class="btn mt-15 ml-10 hover-up " style="background-color: white; border-color: GREEN; color: green;">Continue Shopping</a>
</div> -->


<section class="mt-50 mb-50">
    <div class="container">
        <% if(order.orderStatus === "Delivered"){ %>
            <button onclick="downloadInvoice()" class="btn mt-10 ">Download Invoice</button>
        <% } %>

        <div class="row justify-content-center">
            <div class="col-md-6" id="whole-body">
                <div class="order_review">
                    <div class="mb-20">
                        
                        <h4 class="mb-10">
                            Order Status :
                            <span style="color: rgb(2, 112, 22);">
                                <strong>
                                    <%= order.orderStatus %>
                                </strong>
                            </span>
                        </h4>

                        <h5 class="mb-5">
                            Payment Mode :
                            <span>
                                <%= order.paymentMethod %>
                            </span>
                        </h5>

                        <h5 class="mb-5">
                            Payment :
                            <span style="color: rgb(255, 114, 5);"><%= order.paymentStatus %></span>
                        </h5>

                        <% if(order.isRazorpay && order.status=="Cancelled" ){ %>
                        <h5 class="mb-5">
                            Refund : <% if(order.refund){ %>
                            <span style="color: rgb(0, 231, 42);"> Complete </span>
                            <%}else{ %>
                            <span style="color: rgb(255, 114, 5);">Refund pending</span>
                            <% } %>
                        </h5>
                        <% } %>

                        <h6 style="padding-top: 10px; color: grey;">Order Id: <%= order.orderId %></h6>


                    </div>
                    <div class="table-responsive order_table text-center">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th colspan="2">Products</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.products.forEach(element=> { %>
                                <tr>
                                    <td class="image product-thumbnail"><img src="/admin/productImages/<%= element.product.image[0] %>" alt="#" /></td>

                                    <td>
                                        <h5>
                                            <a href="shop-product-full.html">
                                                <%= element.product.productName %>
                                            </a>
                                        </h5>
                                        <span class="product-qty">x <%= element.quantity %></span>
                                    </td>
                                    <td>₹<%= element.price %></td>
                                </tr>
                                <% }); %>
                                <tr>
                                    <th>Coupon Discount</th>
                                    <td class="product-subtotal" colspan="2">₹<%= order.couponDiscount %></td>
                                </tr>
                                <tr>
                                    <th>Shipping</th>
                                    <td colspan="2">
                                        <em>
                                            <%= order.shipping %>
                                        </em>
                                    </td>
                                </tr>
                                <tr>
                                    <th>Total</th>
                                    <td colspan="2" class="product-subtotal"><span class="font-xl text-brand fw-900">₹<%= order.orderTotal %> .00/-</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Add Address Section Here -->
                    <div class="mb-20 mt-20">
                        <h4>Delivery Address</h4>
                        <div style="border: 1px solid #ddd; padding: 15px; border-radius: 5px;">
                            <p style="margin-bottom: 5px;">
                                <strong>Address Name:</strong>
                                <%= order.address.addressName %>
                            </p>
                            <p style="margin-bottom: 5px;">
                                <strong>Street:</strong>
                                <%= order.address.street %>
                            </p>
                            <p style="margin-bottom: 5px;">
                                <strong>City:</strong>
                                <%= order.address.city %>
                            </p>
                            <p style="margin-bottom: 5px;">
                                <strong>State:</strong>
                                <%= order.address.state %>
                            </p>
                            <p style="margin-bottom: 5px;">
                                <strong>Pin Code:</strong>
                                <%= order.address.pinCode %>
                            </p>
                            <p style="margin-bottom: 0;">
                                <strong>Country:</strong>
                                <%= order.address.country %>
                            </p>
                        </div>
                    </div>

                    <div class="border-color-1 mt-30 mb-30 p-20" style="display: flex; gap: 15px;">
                        <a href="/home" class="btn btn-light" id="cancelEditDialogButton" style="background-color: azure; color: black; cursor: pointer;">Home</a>
                        <a href="/myAccount" class="btn" style="cursor: pointer;">Show Orders</a>

                        <% if(order.orderStatus==="Processing" || order.orderStatus==="Shipped" ){ %>
                        <button onclick="showCancellationDialog()" class="btn btn-secondary">Cancel Order</button>
                        <% } %> <% if(order.orderStatus==="Delivered" ){ %>
                        <button onclick="showReturnDialog()" class="btn btn-secondary">Return Order</button>
                        <%} %> <% if(order.orderStatus === "Pending"){ %>
                        <button onclick="retryPayment()" class="btn btn-secondary">Retry Paymet</button>
                        <%} %>

                        <input type="hidden" id="orderId" value="<%= order.orderId %>" />
                        <input type="hidden" id="orderTotal" value="<%= order.orderTotal  %>" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script src="/scripts/header.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>



<script>
           async function downloadInvoice(){
            const element = document.getElementById('whole-body');  // Get the table container
            html2pdf(element, {
                margin:       1,
                filename:     'invoice.pdf',
                image:        { type: 'jpeg', quality: 0.98 },
                html2canvas:  { scale: 3 },
                jsPDF:        { unit: 'in', format: 'letter', orientation: 'portrait' }
            });
        }


    function showCancellationDialog() {
        Swal.fire({
            title: "Tell us your reason for canceling the order",
            input: "text",
            inputAttributes: {
                autocapitalize: "off",
            },
            showCancelButton: true,
            confirmButtonText: "Submit",
            showLoaderOnConfirm: true,
            preConfirm: (input) => {
                const trimmedInput = input.trim();

                if (trimmedInput.length === 0) {
                    Swal.showValidationMessage("This field cannot be empty");
                    return false;
                }

                if (trimmedInput.length < 10) {
                    Swal.showValidationMessage("Please enter at least 20 characters");
                    return false;
                }

                return trimmedInput;
            },
            allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {
            if (result.isConfirmed) {
                cancelOrder(result.value);
            }
        });
    }

    function cancelOrder(reason) {
        fetch("/api/order/cancelOrder", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                orderId: "<%= order._id %>", // Get the order ID from your EJS template
                reason: reason,
            }),
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    Swal.fire({
                        title: "Order Canceled",
                        text: "Your order has been successfully canceled.",
                        icon: "success",
                    }).then(() => {
                        // Reload the page or redirect to update the UI
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: "There was a problem cancelling your order. Please try again.",
                        icon: "error",
                    });
                }
            })
            .catch((error) => {
                console.error("Error:", error);
                Swal.fire({
                    title: "Error",
                    text: "There was a problem communicating with the server. Please try again.",
                    icon: "error",
                });
            });
    }

    function showReturnDialog() {
        Swal.fire({
            title: "Tell us your reason for Returning the order",
            input: "text",
            inputAttributes: {
                autocapitalize: "off",
            },
            showCancelButton: true,
            confirmButtonText: "Submit",
            showLoaderOnConfirm: true,
            preConfirm: (input) => {
                const trimmedInput = input.trim();

                if (trimmedInput.length === 0) {
                    Swal.showValidationMessage("This field cannot be empty");
                    return false;
                }

                if (trimmedInput.length < 10) {
                    Swal.showValidationMessage("Please enter at least 20 characters");
                    return false;
                }

                return trimmedInput;
            },
            allowOutsideClick: () => !Swal.isLoading(),
        }).then((result) => {
            if (result.isConfirmed) {
                returnOrder(result.value);
            }
        });
    }

    function returnOrder(reason) {
        fetch("/api/order/returnOrder", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({
                orderId: "<%= order._id %>", // Get the order ID from your EJS template
                reason: reason,
            }),
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    Swal.fire({
                        title: "Order Returned",
                        text: "Payment will shortly reflect on your wallet.",
                        icon: "success",
                    }).then(() => {
                        // Reload the page or redirect to update the UI
                        window.location.reload();
                    });
                } else {
                    Swal.fire({
                        title: "Error",
                        text: "There was a problem Returning your order. Please try again.",
                        icon: "error",
                    });
                }
            })
            .catch((error) => {
                console.error("Error:", error);
                Swal.fire({
                    title: "Error",
                    text: "There was a problem communicating with the server. Please try again.",
                    icon: "error",
                });
            });
    }

    async function retryPayment() {
        // Get the order details (assuming they are stored somewhere)

        let id = document.getElementById("orderId").value;


        const response = await fetch(`/api/retryPayment?id=${id}`)

        const responseData = await response.json();


        initializeRazorpay(responseData);


    }

    function initializeRazorpay(razorpayOrder) {
        let orderDetails = razorpayOrder
        const options = {
            key: 'rzp_test_l5PYAz2fxdpeOD', // Replace with your Razorpay key ID
            amount: razorpayOrder.amount,
            currency: 'INR',
            name: 'AUDIOTIC',
            description: 'Payment for order',
            order_id: razorpayOrder.id,
            handler: function (response) {
                // Handle payment success
                console.log('Payment successful:', response);
                // Perform any necessary actions, such as updating the order status on the server
                verifyPayment(response, razorpayOrder)
            },
            prefill: {
                name: 'Customer Name',
                email: 'customer@example.com',
                contact: '9999999999',
            },
            notes: {
                address: 'Razorpay Corporate Office',
            },
            theme: {
                color: '#3399cc',
            },
            modal: {
                ondismiss: function () {
                    // This function is triggered when the payment modal is closed by the user or fails
                    console.log('Payment failed or dismissed.');
                    handlePaymentFailure(razorpayOrder); // You can handle the failure here
                },
            }
        }
        const rzp1 = new Razorpay(options);

        rzp1.on('payment.failed', function (response){

            handlePaymentFailure(razorpayOrder); // You can handle the failure here


    });
        rzp1.open();
    }

    function handlePaymentFailure(razorpayOrder) {

        fetch('/api/checkout/handleFailedPayment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId: razorpayOrder.receipt })
        })
            .then(res => res.json())
            .then(data => {
                if (data.status === 'ok') {
                    console.log('Order status updated to failed.');
                    window.location.href = data.redirect;

                } else {
                    console.error('Failed to update order status.');
                }
            })
            .catch(error => {
                console.error('Error updating order status:', error);
            });
    }

    async function verifyPayment(response, razorpayOrder) {

        const paymentDetails = {
            response, razorpayOrder
        }
        return fetch('/api/checkout/verifyPayment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(paymentDetails)
        })
            .then(res => res.json())
            .then(data => {
                if (data.status === 'ok') {
                    console.log('Payment verified successfull')
                    window.location.href = data.redirect;
                } else {
                    console.log('Payment verification failed');
                    showToast('Payment verification failed', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred', 'error');
            });
    }

</script>
